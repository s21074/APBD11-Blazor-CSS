@page "/students"
@inject IStudentService StudentService
@inject IJSRuntime js
@inject NavigationManager navigator


<h3>Students</h3>
<table>
    <tr>
        <th @onclick="@(() => Sort("Avatar"))">Avatar</th>
        <th @onclick="@(() => Sort("FirstName"))">First name</th>
        <th @onclick="@(() => Sort("LastName"))">Last name</th>
        <th @onclick="@(() => Sort("Birthdate"))">Birthdate</th>
        <th @onclick="@(() => Sort("Studies"))">Studies</th>
        <th></th>
    </tr>
    @foreach(var stud in StudentsList)
    {
        <tr class="students">
            <td class="students">@stud.Avatar</td>
            <td class="students">@stud.FirstName</td>
            <td class="students">@stud.LastName</td>
            <td class="students">@stud.Birthdate.ToShortDateString()</td>
            <td class="students">@stud.Studies</td>
            <td class="students">
                <button id="delete" @onclick="(() => Delete(stud.ID))">Delete</button>
                <button @onclick="(() => ShowDetails(stud.ID))">Details</button>
            </td>
        </tr>
    }
</table>


@code {
    public List<Student> StudentsList { get; set; }
    public KeyValuePair<string, bool> ColumnSort { get; set; } = new KeyValuePair<string, bool>("", false);

    private void Sort(string columnName)
    {
        if(ColumnSort.Key != columnName)
        {
            ColumnSort = new KeyValuePair<string, bool>(columnName, false);
        } else
        {
            ColumnSort = new KeyValuePair<string, bool>(columnName, !ColumnSort.Value);
        }

        if (ColumnSort.Value)
        {
            SortListAsc(columnName);
        }else
        {
            SortListDesc(columnName);
        }
    }

    private void SortListDesc(string columnName)
    {
        StudentsList = StudentsList.OrderByDescending(e => e.GetType().GetProperty(columnName).GetValue(e, null)).ToList();
    }

    private void SortListAsc(string columnName)
    {
        StudentsList = StudentsList.OrderBy(e => e.GetType().GetProperty(columnName).GetValue(e, null)).ToList();
    }

    protected override void OnInitialized()
    {
        StudentsList = StudentService.GetStudents();
    }

    private async Task Delete(int id)
    {
        var result =await js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (result)
        {
            StudentService.Remove(id);
        }
    }

    private void ShowDetails(int id)
    {
        navigator.NavigateTo("/students/" + id);
    }
}
